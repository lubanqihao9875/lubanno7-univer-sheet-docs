import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.BwiaPQAz.js";const E=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"resources/index.md","filePath":"resources/index.md"}'),l={name:"resources/index.md"};function h(t,s,p,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h2 id="q-lubanno7universheet组件支持异步加载吗" tabindex="-1">Q：Lubanno7UniverSheet组件支持异步加载吗？ <a class="header-anchor" href="#q-lubanno7universheet组件支持异步加载吗" aria-label="Permalink to &quot;Q：Lubanno7UniverSheet组件支持异步加载吗？&quot;">​</a></h2><p>A：支持异步加载，但组件默认未开启该功能，具体说明如下：</p><h3 id="一、默认未开启异步加载的核心原因" tabindex="-1">一、默认未开启异步加载的核心原因 <a class="header-anchor" href="#一、默认未开启异步加载的核心原因" aria-label="Permalink to &quot;一、默认未开启异步加载的核心原因&quot;">​</a></h3><ol><li><p><strong>加载效率本质无提升，反而可能耗时更长</strong><br> 异步加载通过 “分批次加载数据” 减少浏览器单帧内的数据处理量，使主线程可分配资源至其他操作，但数据总加载量并未减少；由于单帧内并非以最大化加载速率处理数据，其整体加载耗时通常长于同步加载。</p></li><li><p><strong>同步与异步加载的逻辑本质不同</strong></p></li></ol><ul><li>同步加载：表格初始化时一次性加载所有数据，数据与表格初始化过程同步完成；</li><li>异步加载：先完成空表格创建，再逐行执行数据加载，与同步加载 “一次性完成初始化与数据加载” 的机制存在本质区别。</li></ul><h3 id="二、同步与异步加载的适用场景" tabindex="-1">二、同步与异步加载的适用场景 <a class="header-anchor" href="#二、同步与异步加载的适用场景" aria-label="Permalink to &quot;二、同步与异步加载的适用场景&quot;">​</a></h3><ul><li><p><strong>优先选同步加载：小数据量场景</strong><br> 经测试验证，同等数据量下，同步加载的速率优于异步加载；若数据量较小，未对页面交互产生影响（如无卡顿、无主线程阻塞等问题），采用同步加载可同时保障效率与用户体验。</p></li><li><p><strong>建议用异步加载：大数据量场景</strong><br> 当数据量过大时，同步加载会导致主线程阻塞，进而引发页面无响应；此时开启异步加载，表格可分批次执行数据加载，主线程可并行处理其他操作，有效避免页面卡死问题。</p></li></ul><h3 id="三、异步加载的开启方式与参数调整" tabindex="-1">三、异步加载的开启方式与参数调整 <a class="header-anchor" href="#三、异步加载的开启方式与参数调整" aria-label="Permalink to &quot;三、异步加载的开启方式与参数调整&quot;">​</a></h3><ol><li><strong>开启方法</strong>：通过配置<code>asyncOptions.isAsyncEnabled = true</code>启用异步加载；</li><li><strong>参数调整</strong>： <ul><li><code>baseBatchSize</code>：控制单批次加载的数据量，值越小浏览器交互越流畅，但整体加载时间越长，需根据数据量与页面体验平衡设置；</li><li>精细化分步控制参数：组件提供的批次比例控制参数，可通过调整该参数优化加载批次的分配比例，以实现 “交互流畅性” 与 “加载效率” 的最优平衡。</li></ul></li></ol><h2 id="q-lubanno7universheet组件是否支持操作univer底层" tabindex="-1">Q：Lubanno7UniverSheet组件是否支持操作Univer底层？ <a class="header-anchor" href="#q-lubanno7universheet组件是否支持操作univer底层" aria-label="Permalink to &quot;Q：Lubanno7UniverSheet组件是否支持操作Univer底层？&quot;">​</a></h2><p>A：该组件支持对Univer底层的操作，通过主动暴露核心实例与专用方法，降低开发者定制化开发的难度，具体说明如下：</p><h3 id="一、核心支持能力-暴露底层操作入口" tabindex="-1">一、核心支持能力：暴露底层操作入口 <a class="header-anchor" href="#一、核心支持能力-暴露底层操作入口" aria-label="Permalink to &quot;一、核心支持能力：暴露底层操作入口&quot;">​</a></h3><p>组件通过明确暴露两类核心实例与专用方法，为底层操作提供直接入口：</p><ol><li><strong>核心实例暴露</strong><br> 组件对外暴露 <code>univerInstance</code> 与 <code>univerAPIInstance</code> 两个底层实例，开发者可通过这两个实例直接调用Univer底层的原生能力，实现对表格底层逻辑的深度控制。</li><li><strong>专用方法补充</strong><br> 除核心实例外，组件额外暴露与“Univer底层索引操作”直接相关的专用方法，无需开发者自行封装索引转换逻辑，进一步简化底层操作的实现流程。</li></ol><h3 id="二、实际操作示例-扩展自定义事件-以rowheaderclick为例" tabindex="-1">二、实际操作示例：扩展自定义事件（以RowHeaderClick为例） <a class="header-anchor" href="#二、实际操作示例-扩展自定义事件-以rowheaderclick为例" aria-label="Permalink to &quot;二、实际操作示例：扩展自定义事件（以RowHeaderClick为例）&quot;">​</a></h3><p>以下为通过组件暴露的底层能力，扩展“行表头点击（RowHeaderClick）”事件的示例代码，可参考该逻辑实现其他自定义底层操作：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明事件销毁器（用于后续资源清理）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rowHeaderClickDisposable;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听表格初始化完成事件（确保底层实例已就绪）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sheet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tableInitialized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1. 获取组件暴露的底层资源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exposed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sheet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getExposed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> componentMethods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exposed.methods; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件封装的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> univerAPIInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exposed.attributes.univerAPIInstance; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 底层Univer API实例</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2. 通过底层API实例添加RowHeaderClick事件监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rowHeaderClickDisposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> univerAPIInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    univerAPIInstance.Event.RowHeaderClick, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取点击的行索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headerRowCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> componentMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTableHeaderRowCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取表头行数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 3. 业务逻辑判断：区分点击“表头行”与“数据行”</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headerRowCount) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;触发表头行点击事件&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 转换为数据行索引（排除表头行）并获取行数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dataRowIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headerRowCount;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rowData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> componentMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRowByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataRowIndex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`触发第\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataRowIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}行数据行点击事件，数据：\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rowData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件销毁前清理事件监听（需参考Univer官网规范避免内存泄漏）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rowHeaderClickDisposable) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rowHeaderClickDisposable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="三、关键注意事项" tabindex="-1">三、关键注意事项 <a class="header-anchor" href="#三、关键注意事项" aria-label="Permalink to &quot;三、关键注意事项&quot;">​</a></h3><ol><li><strong>实例就绪时机</strong><br> 需在 tableInitialized 事件触发后获取底层实例（此时表格底层逻辑已初始化完成），避免因实例未就绪导致的调用失败。</li><li><strong>资源清理规范</strong><br> 通过底层 API 添加的事件、监听等资源，需在组件销毁前按 Univer 官网的清理规范执行销毁操作（如示例中的 dispose() 方法），防止内存泄漏。</li></ol><h2 id="q-何时可获取lubanno7universheet组件的exposed对象" tabindex="-1">Q：何时可获取Lubanno7UniverSheet组件的exposed对象？ <a class="header-anchor" href="#q-何时可获取lubanno7universheet组件的exposed对象" aria-label="Permalink to &quot;Q：何时可获取Lubanno7UniverSheet组件的exposed对象？&quot;">​</a></h2><p>A：仅在组件触发<code>tableInitialized</code>事件后，通过<code>sheet.getExposed()</code>方法可获取到exposed对象，在该事件触发前调用此方法返回<code>null</code>。</p>`,22)])])}const g=i(l,[["render",h]]);export{E as __pageData,g as default};
